import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c as r,d as u,w as n,e as t,b as s,a}from"./app-BuiyluPg.js";const d={},m=t('<h1 id="polimorfismo" tabindex="-1"><a class="header-anchor" href="#polimorfismo"><span>Polimorfismo</span></a></h1><ul><li>É a possibilidade de se solicitar um serviço a um objeto, cuja execução vai depender do tipo de objeto instanciado</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuU9oW3EJSnABYnNSCjDBYnAhkHI082MrE3Kl8x58GvEh5Yhjd5cKN9gJZrC-ABKaCIyTduh0qiIKeiIKV8NKYfBKl1JyMY2kKR2fqTM5MOqY1jSBz0ZGC90te3G0" alt="uml diagram" loading="lazy"><figcaption>UML da relação entre Figura, Circulo, Retangulo e Quadrado.</figcaption></figure><ul><li><p><code>Círculo</code>, <code>Retangulo</code> e <code>Quadrado</code> são do tipo <code>Figura</code>.</p><ul><li>Método desenhar()</li></ul></li><li><p>O resultado depende do tipo de figura que receber a mensagem</p></li><li><p>O polimorfismo permite escrever programas que processam objetos que compartilham a mesma superclasse em uma hierarquia de classe como se todas fossem objetos da superclasse.</p></li><li><p>Sistema de simulação de movimento de Animais</p></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iv9p4ekB5HppCdCJSwgv580W83-l95yXCoypEJCVII0jCnVCoyqlIotIqEIgXMeDICsiIAt6AkMObvQPb9cFNJ80I2GMOKX2NA9WKwEh2p4QHGHg8gegY45S3gbvAM2_GMW0" alt="uml diagram" loading="lazy"><figcaption>UML da relação entre Animal, Peixe, Anfíbio e Pássaro.</figcaption></figure><ul><li>Peixes, Anfíbios, Pássaros <ul><li>Superclasse Animal <ul><li>Método mover</li><li>Localização x,y</li></ul></li><li>Todas as subclasses implementam o método mover</li></ul></li><li>O programa envia a mensagem &quot;mover&quot; para os 3 objetos</li></ul>',6),k=a("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token comment"},"//..."),s(`
`),a("span",{class:"token class-name"},"Animal"),s(" animal"),a("span",{class:"token punctuation"},"["),a("span",{class:"token punctuation"},"]"),s(),a("span",{class:"token operator"},"="),s(),a("span",{class:"token keyword"},"new"),s(),a("span",{class:"token class-name"},"Animal"),a("span",{class:"token punctuation"},"["),a("span",{class:"token number"},"3"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},";"),s(`
`),a("span",{class:"token comment"},"//..."),s(`
`),a("span",{class:"token keyword"},"for"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"int"),s(" i "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token number"},"0"),a("span",{class:"token punctuation"},";"),s(" i "),a("span",{class:"token operator"},"<"),s(),a("span",{class:"token number"},"3"),s(),a("span",{class:"token punctuation"},";"),s(" i"),a("span",{class:"token operator"},"++"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},"{"),s(`
    animal`),a("span",{class:"token punctuation"},"["),s("i"),a("span",{class:"token punctuation"},"]"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"mover"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),a("span",{class:"token comment"},"//como será o movimento desse animal?"),s(`
`),a("span",{class:"token punctuation"},"}"),s(`
`),a("span",{class:"token comment"},"//..."),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),v=a("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[a("pre",{class:"language-java"},[a("code",null,[a("span",{class:"token class-name"},"List"),a("span",{class:"token generics"},[a("span",{class:"token punctuation"},"<"),a("span",{class:"token class-name"},"Animal"),a("span",{class:"token punctuation"},">")]),s(" animais "),a("span",{class:"token operator"},"="),s(),a("span",{class:"token class-name"},"List"),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"of"),a("span",{class:"token punctuation"},"("),a("span",{class:"token keyword"},"new"),s(),a("span",{class:"token class-name"},"Peixe"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},","),s(),a("span",{class:"token keyword"},"new"),s(),a("span",{class:"token class-name"},"Anfibio"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},","),s(),a("span",{class:"token keyword"},"new"),s(),a("span",{class:"token class-name"},"Passaro"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),s(`
`),a("span",{class:"token keyword"},"for"),a("span",{class:"token punctuation"},"("),a("span",{class:"token class-name"},"Animal"),s(" animal "),a("span",{class:"token operator"},":"),s(" animais "),a("span",{class:"token punctuation"},")"),s(),a("span",{class:"token punctuation"},"{"),s(`
    animal`),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"mover"),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),a("span",{class:"token punctuation"},";"),a("span",{class:"token comment"},"//como será o movimento desse animal?"),s(`
`),a("span",{class:"token punctuation"},"}"),s(`
`)])]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"}),a("div",{class:"line-number"})])],-1),g=t(`<ul><li>Cada animal responde ao método mover de uma maneira diferente <ul><li>O peixe pode nadar 2 metros</li><li>Anfíbio pular 1 metro</li><li>Pássaro voar 3 metros</li></ul></li><li>Cada objeto irá responder a mensagem &quot;mover&quot; de acordo com sua instancia</li><li>Apesar de todos serem Animais o fato do método &quot;mover&quot; ter &quot;muitas formas&quot; é a chave do polimorfismo <ul><li>Polimorfismo vem de Polimorfo, &quot;Que é sujeito a mudar de forma&quot;</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">Definição</p><p>Polimorfismo possibilita tratar objetos de tipos mais especializados de forma genérica</p></div><h2 id="caelum" tabindex="-1"><a class="header-anchor" href="#caelum"><span>Caelum</span></a></h2><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><p>O que guarda uma variável do tipo <code>Funcionario</code>? Uma referência para um <code>Funcionario</code>, nunca o objeto em si.</p><p>Na herança, vimos que todo <code>Gerente</code> <strong>é um</strong> <code>Funcionario</code>, pois é uma extensão deste. Podemos nos referir a um <code>Gerente</code> como sendo um <code>Funcionario</code>. Se alguém precisa falar com um <code>Funcionario</code> do banco, pode falar com um <code>Gerente</code>! Porque? Pois <code>Gerente</code> <strong>é um</strong> <code>Funcionario</code>. Essa é a semântica da herança.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Gerente</span> gerente <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Funcionario</span> funcionario <span class="token operator">=</span> gerente<span class="token punctuation">;</span>
funcionario<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/LL2x4W8X3Epv2aej_0Nd2aShAql78WSvP0OIXqVb-EzYxlGm1MINPBDXo0LIgJ6euPjfbT0K81TGdp5oyl1KkeM1PBN3X5Hm9QPAnZD1ygoKqE1QnN9UXJbrJRiMabnAykGqSSGUcySaq78TcuCCGQG_b6-26UaEFqGrOk837bSJMOOP3vRp_y2HEI2GXbgQ6szWynFSIi5jzh-is1htynR2TdjsB-gb1YGh7pZVRm00" alt="uml diagram" loading="lazy"><figcaption>Representação da memória de duas variáveis para a mesmo referência.</figcaption></figure><p>Polimorfismo é a capacidade de um objeto poder ser referenciado de várias formas. (cuidado, polimorfismo não quer dizer que o objeto fica se transformando, muito pelo contrário, um objeto nasce de um tipo e morre daquele tipo, o que pode mudar é a maneira como nos referimos a ele).</p><p>Até aqui tudo bem, mas e se eu tentar:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>funcionario<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Qual é o retorno desse método? <code>500</code> ou <code>750</code>? No Java, a invocação de método sempre vai ser <strong>decidida em tempo de execução</strong>. O Java vai procurar o objeto na memória e, aí sim, decidir qual método deve ser chamado, sempre relacionando com sua classe de verdade, e não com a que estamos usando para referenciá-lo. Apesar de estarmos nos referenciando a esse <code>Gerente</code> como sendo um <code>Funcionario</code>, o método executado é o do <code>Gerente</code>. O retorno é <code>750</code>.</p><p>Parece estranho criar um gerente e referenciá-lo como apenas um funcionário. Por que faríamos isso? Na verdade, a situação que costuma aparecer é a que temos um método que recebe um argumento do tipo <code>Funcionario</code>:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ControleDeBonificacoes</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> totalDeBonificacoes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registra</span><span class="token punctuation">(</span><span class="token class-name">Funcionario</span> funcionario<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>totalDeBonificacoes <span class="token operator">+=</span> funcionario<span class="token punctuation">.</span><span class="token function">getBonificacao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTotalDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>totalDeBonificacoes<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E, em algum lugar da minha aplicação (ou no main, se for apenas para testes):</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">ControleDeBonificacoes</span> controle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ControleDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Gerente</span> funcionario1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

funcionario1<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
controle<span class="token punctuation">.</span><span class="token function">registra</span><span class="token punctuation">(</span>funcionario1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Funcionario</span> funcionario2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Funcionario</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
funcionario2<span class="token punctuation">.</span><span class="token function">setSalario</span><span class="token punctuation">(</span><span class="token number">1000.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
controle<span class="token punctuation">.</span><span class="token function">registra</span><span class="token punctuation">(</span>funcionario2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>controle<span class="token punctuation">.</span><span class="token function">getTotalDeBonificacoes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Perceba que conseguimos passar um <code>Gerente</code> para um método que recebe um <code>Funcionario</code> como argumento. Pense como numa porta na agência bancária com o seguinte aviso: &quot;Permitida a entrada apenas de Funcionários&quot;. Um gerente pode passar nessa porta? Sim, pois <code>Gerente</code> <strong>é um</strong> <code>Funcionario</code>.</p><p>Qual será o valor resultante? Não importa que dentro do método registra do <code>ControleDeBonificacoes</code> receba <code>Funcionario</code>. Quando ele receber um objeto que realmente é um <code>Gerente</code>, o seu método reescrito será invocado. Reafirmando: não importa como nos referenciamos a um objeto, o método que será invocado é sempre o que é dele.</p><p>No dia em que criarmos uma classe <code>Secretaria</code>, por exemplo, que é filha de <code>Funcionario</code>, precisaremos mudar a classe de <code>ControleDeBonificacoes</code>? Não. Basta a classe <code>Secretaria</code> reescrever os métodos que lhe parecerem necessários. É exatamente esse o poder do polimorfismo, juntamente com a reescrita de método: diminuir o acoplamento entre as classes, para evitar que novos códigos resultem em modificações em inúmeros lugares.</p><p>Perceba que quem criou <code>ControleDeBonificacoes</code> pode nunca ter imaginado a criação da classe <code>Secretaria</code> ou <code>Engenheiro</code>. Contudo, não será necessário reimplementar esse controle em cada nova classe: reaproveitamos aquele código</p><div class="hint-container warning"><p class="hint-container-title">Herança versus acoplamento</p><p>Note que o uso de herança aumenta o acoplamento entre as classes, isto é, o quanto uma classe depende de outra. A relação entre classe mãe e filha é muito forte e isso acaba fazendo com que o programador das classes filhas tenha que conhecer a implementação da classe pai e vice-versa. Fica difícil fazer uma mudança pontual no sistema.</p><p>Por exemplo, imagine se tivermos que mudar algo na nossa classe Funcionario, mas não quiséssemos que todos os funcionários sofressem a mesma mudança. Precisaríamos passar por cada uma das filhas de Funcionario verificando se ela se comporta como deveria ou se devemos sobrescrever o tal método modificado.</p><p>Esse é um problema da herança, e não do polimorfismo, que resolveremos mais tarde com a ajuda de Interfaces.</p></div><h3 id="um-outro-exemplo" tabindex="-1"><a class="header-anchor" href="#um-outro-exemplo"><span>Um outro exemplo</span></a></h3><p>Imagine que vamos modelar um sistema para a faculdade que controle as despesas com funcionários e professores. Nosso funcionário fica assim:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">EmpregadoDaFaculdade</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> salario<span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">getGastos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;nome: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">+</span> <span class="token string">&quot; com salário &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salario<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// métodos de get, set e outros</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O gasto que temos com o professor não é apenas seu salário. Temos de somar um bônus de 10 reais por hora/aula. O que fazemos então? Reescrevemos o método. Assim como o <code>getGastos</code> é diferente, o <code>getInfo</code> também será, pois temos de mostrar as horas/aula também.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ProfessorDaFaculdade</span> <span class="token keyword">extends</span> <span class="token class-name">EmpregadoDaFaculdade</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> horasDeAula<span class="token punctuation">;</span>
    <span class="token keyword">double</span> <span class="token function">getGastos</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getSalario</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>horasDeAula <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> informacaoBasica <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> informacao <span class="token operator">=</span> informacaoBasica <span class="token operator">+</span> <span class="token string">&quot; horas de aula: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>horasDeAula<span class="token punctuation">;</span>
        <span class="token keyword">return</span> informacao<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// métodos de get, set e outros que forem necessários</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A novidade, aqui, é a palavra chave super. Apesar do método ter sido reescrito, gostaríamos de acessar o método da classe mãe, para não ter de copiar e colocar o conteúdo desse método e depois concatenar com a informação das horas de aula.</p><p>Como tiramos proveito do polimorfismo? Imagine que temos uma classe de relatório:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">GeradorDeRelatorio</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adiciona</span><span class="token punctuation">(</span><span class="token class-name">EmpregadoDaFaculdade</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getGastos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Podemos passar para nossa classe qualquer <code>EmpregadoDaFaculdade</code>! Vai funcionar tanto para professor, quanto para outros funcionários.</p><p>Um certo dia, muito depois de terminar essa classe de relatório, resolvemos aumentar nosso sistema, e colocar uma classe nova, que representa o <code>Reitor</code>. Como ele também é um <code>EmpregadoDaFaculdade</code>, será que vamos precisar alterar algo na nossa classe de <code>Relatorio</code>? Não. Essa é a ideia! Quem programou a classe <code>GeradorDeRelatorio</code> nunca imaginou que existiria uma classe <code>Reitor</code> e, mesmo assim, o sistema funciona.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Reitor</span> <span class="token keyword">extends</span> <span class="token class-name">EmpregadoDaFaculdade</span> <span class="token punctuation">{</span>
    <span class="token comment">// informações extras</span>
    <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; e ele é um reitor&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// não sobrescrevemos o getGastos!!!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="k19" tabindex="-1"><a class="header-anchor" href="#k19"><span>K19</span></a></h2><p><sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup></p><h3 id="controle-de-ponto" tabindex="-1"><a class="header-anchor" href="#controle-de-ponto"><span>Controle de Ponto</span></a></h3><p>O sistema do banco deve possuir um controle de ponto para registrar a entrada e saída dos funcionários. O pagamento dos funcionários depende dessas informações. Podemos definir uma classe para implementar o funcionamento de um relógio de ponto.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ControleDePonto</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraEntrada</span><span class="token punctuation">(</span><span class="token class-name">Gerente</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ENTRADA:&quot;</span><span class="token operator">+</span>g<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraSaida</span><span class="token punctuation">(</span><span class="token class-name">Gerente</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SAÍDA:&quot;</span><span class="token operator">+</span>g<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A classe acima possui dois métodos: o primeiro para registrar a entrada e o segundo para registrar a saída dos gerentes do banco. Contudo, esses dois métodos não são aplicáveis aos outros tipos de funcionários.</p><p>Seguindo essa abordagem, a classe <code>ControleDePonto</code> precisaria de um par de métodos para cada cargo. Então, a quantidade de métodos dessa classe seria igual a quantidade de cargos multiplicada por dois. Imagine que no banco exista 30 cargos distintos. Teríamos 60 métodos na classe <code>ControleDePonto</code>.</p><p>Os procedimentos de registro de entrada e saída são idênticos para todos os funcionários. Consequentemente, qualquer alteração na lógica desses procedimentos implicaria na modificação de todos os métodos da classe <code>ControleDePonto</code>.</p><p>Além disso, se o banco definir um novo tipo de funcionário, dois novos métodos praticamente idênticos aos que já existem teriam de ser adicionados na classe <code>ControleDePonto</code>. Analogamente, se um cargo deixar de existir, os dois métodos correspondentes da classe <code>ControleDePonto</code> deverão ser retirados.</p><h3 id="modelagem-dos-funcionarios" tabindex="-1"><a class="header-anchor" href="#modelagem-dos-funcionarios"><span>Modelagem dos funcionários</span></a></h3><p>Com o intuito inicial de reutilizar código, podemos modelar os diversos tipos de funcionários do banco utilizando o conceito de herança.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> codigo <span class="token punctuation">;</span>
    <span class="token comment">// GETTERS AND SETTERS</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> usuario <span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> senha <span class="token punctuation">;</span>
    <span class="token comment">// GETTERS AND SETTERS</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Telefonista</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> ramal <span class="token punctuation">;</span>
    <span class="token comment">// GETTERS AND SETTERS</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="e-um-extends" tabindex="-1"><a class="header-anchor" href="#e-um-extends"><span>É UM (extends)</span></a></h4><p>Além de gerar reaproveitamento de código, a utilização de herança permite que objetos criados a partir das classes específicas sejam tratados como objetos da classe genérica.</p><p>Em outras palavras, a herança entre as classes que modelam os funcionários permite que objetos criados a partir das classes <code>Gerente</code> ou <code>Telefonista</code> sejam tratados como objetos da classe <code>Funcionario</code>.</p><p>No código da classe <code>Gerente</code> utilizamos a palavra <strong>extends</strong>. Ela pode ser interpretada como a expressão: <strong>É UM</strong> ou <strong>É UMA</strong>.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Gerente</span> <span class="token keyword">extends</span> <span class="token class-name">Funcionario</span>
<span class="token comment">// TODO Gerente É UM Funcionario</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Como está explícito no código que todo gerente é um funcionário então podemos criar um objeto da classe <code>Gerente</code> e tratá-lo como um objeto da classe <code>Funcionario</code> também.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// Criando um objeto da classe Gerente</span>
<span class="token class-name">Gerente</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gerente</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Tratando um gerente como um objeto da classe Funcionario</span>
<span class="token class-name">Funcionario</span> f <span class="token operator">=</span> g <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em alguns lugares do sistema do banco será mais vantajoso tratar um objeto da classe <code>Gerente</code> como um objeto da classe <code>Funcionario</code>.</p><h4 id="melhorando-o-controle-de-ponto" tabindex="-1"><a class="header-anchor" href="#melhorando-o-controle-de-ponto"><span>Melhorando o controle de ponto</span></a></h4><p>O registro da entrada ou saída não depende do cargo do funcionário. Não faz sentido criar um método que registre a entrada para cada tipo de funcionário, pois eles serão sempre idênticos. Analogamente, não faz sentido criar um método que registre a saída para cada tipo de funcionário.</p><p>Dado que podemos tratar os objetos das classes derivadas de <code>Funcionario</code> como sendo objetos dessa classe, podemos implementar um método que seja capaz de registrar a entrada de qualquer funcionário independentemente do cargo. Analogamente, podemos fazer o mesmo para o procedimento de saída.</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">ControleDePonto</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraEntrada</span><span class="token punctuation">(</span><span class="token class-name">Funcionario</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ENTRADA:&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registraSaida</span><span class="token punctuation">(</span><span class="token class-name">Funcionario</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;dd/MM/ yyyy HH:mm:ss&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">Date</span> agora <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;SAÍDA:&quot;</span><span class="token operator">+</span>f<span class="token punctuation">.</span><span class="token function">getCodigo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DATA:&quot;</span><span class="token operator">+</span>sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>agora<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Os métodos <code>registraEntrada()</code> e <code>registraSaida()</code> recebem referências de objetos da classe <code>Funcionario</code> como parâmetro. Consequentemente, podem receber referências de objetos de qualquer classe que deriva direta ou indiretamente da classe Funcionario.</p><p>A capacidade de tratar objetos criados a partir das classes específicas como objetos de uma classe genérica é chamada de polimorfismo.</p><p>Aplicando a ideia do polimorfismo no controle de ponto, facilitamos a manutenção da classe <code>ControleDePonto</code>. Qualquer alteração no procedimento de entrada ou saída implica em alterações em métodos únicos.</p><p>Além disso, novos tipos de funcionários podem ser definidos sem a necessidade de qualquer alteração na classe <code>ControleDePonto</code>. Analogamente, se algum cargo deixar de existir, nada precisará ser modificado na classe <code>ControleDePonto</code>.</p><h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Caelum. Java e Orientação a Objetos - Curso fj-11. <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p>K19-Treinamentos. (2013). Orientação a Objetos em Java, 220. <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>`,65);function f(b,h){const c=i("Tabs");return l(),r("div",null,[m,u(c,{id:"81",data:[{id:"for"},{id:"Foreach"}]},{title0:n(({value:e,isActive:o})=>[s("for")]),title1:n(({value:e,isActive:o})=>[s("Foreach")]),tab0:n(({value:e,isActive:o})=>[k]),tab1:n(({value:e,isActive:o})=>[v]),_:1}),g])}const j=p(d,[["render",f],["__file","11_polimorfismo.html.vue"]]),w=JSON.parse('{"path":"/posts/11_polimorfismo.html","title":"Polimorfismo","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-08-20T22:40:00.000Z","tag":["polimorfismo"],"category":["aula"],"order":11,"gitInclude":["../../src/bib/bib.md"],"description":"Polimorfismo É a possibilidade de se solicitar um serviço a um objeto, cuja execução vai depender do tipo de objeto instanciado uml diagram UML da relação entre Figura, Circulo,...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-poo.github.io/blog-material-aula/blog-material-aula/posts/11_polimorfismo.html"}],["meta",{"property":"og:site_name","content":"20241 POO Blog das Aulas"}],["meta",{"property":"og:title","content":"Polimorfismo"}],["meta",{"property":"og:description","content":"Polimorfismo É a possibilidade de se solicitar um serviço a um objeto, cuja execução vai depender do tipo de objeto instanciado uml diagram UML da relação entre Figura, Circulo,..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-08-21T22:36:59.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"polimorfismo"}],["meta",{"property":"article:published_time","content":"2024-08-20T22:40:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-21T22:36:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Polimorfismo\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-20T22:40:00.000Z\\",\\"dateModified\\":\\"2024-08-21T22:36:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Caelum","slug":"caelum","link":"#caelum","children":[{"level":3,"title":"Um outro exemplo","slug":"um-outro-exemplo","link":"#um-outro-exemplo","children":[]}]},{"level":2,"title":"K19","slug":"k19","link":"#k19","children":[{"level":3,"title":"Controle de Ponto","slug":"controle-de-ponto","link":"#controle-de-ponto","children":[]},{"level":3,"title":"Modelagem dos funcionários","slug":"modelagem-dos-funcionarios","link":"#modelagem-dos-funcionarios","children":[]}]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":1710890167000,"updatedTime":1724279819000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":2},{"name":"Leandro Souza","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":6.89,"words":2067},"filePathRelative":"posts/11_polimorfismo.md","localizedDate":"20 de agosto de 2024","autoDesc":true}');export{j as comp,w as data};
