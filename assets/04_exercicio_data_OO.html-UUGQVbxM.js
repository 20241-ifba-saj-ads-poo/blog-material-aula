import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,e as t}from"./app-G9OFEyOD.js";const o={},e=t(`<h1 id="exercicio-data-oo" tabindex="-1"><a class="header-anchor" href="#exercicio-data-oo"><span>Exercício: Data OO</span></a></h1><ol><li><p>Utilizando os conhecimentos de O.O. construa um programa que represente uma <code>Data</code> utilizando as informações abaixo.</p><ul><li>Toda <code>Data</code> deve representar dia, mês e ano.</li><li>Toda <code>Data</code> deve poder saber se ela é anterior, posterior ou igual a outra <code>Data</code>.</li><li>Toda <code>Data</code> deve poder incrementar o dia depois de ser criada.</li><li>Toda <code>Data</code> deve poder exibir suas informações no formato Texto.</li></ul></li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">Data</span> data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data1<span class="token punctuation">.</span>dia <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        data1<span class="token punctuation">.</span>mes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        data1<span class="token punctuation">.</span>ano <span class="token operator">=</span> <span class="token number">2024</span><span class="token punctuation">;</span>
        <span class="token class-name">Data</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data2<span class="token punctuation">.</span>dia <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        data2<span class="token punctuation">.</span>mes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        data2<span class="token punctuation">.</span>ano <span class="token operator">=</span> <span class="token number">2024</span><span class="token punctuation">;</span>
        
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Data 1: &quot;</span><span class="token operator">+</span>data1<span class="token operator">+</span><span class="token string">&quot; | Data 2: &quot;</span><span class="token operator">+</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.anterior(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">anterior</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.posterior(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">posterior</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.igual(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">igual</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data1<span class="token punctuation">.</span><span class="token function">incrementarDia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Data 1 :&quot;</span><span class="token operator">+</span>data1<span class="token operator">+</span><span class="token string">&quot;| Data 2 &quot;</span><span class="token operator">+</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.anterior(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">anterior</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.posterior(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">posterior</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.igual(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">igual</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        data1<span class="token punctuation">.</span><span class="token function">incrementarDia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Data 1 :&quot;</span><span class="token operator">+</span>data1<span class="token operator">+</span><span class="token string">&quot;| Data 2 &quot;</span><span class="token operator">+</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.anterior(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">anterior</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.posterior(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">posterior</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;data1.igual(data2): &quot;</span><span class="token operator">+</span>data1<span class="token punctuation">.</span><span class="token function">igual</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Saida esperada</p><div class="language-console line-numbers-mode" data-ext="console" data-title="console"><pre class="language-console"><code>Data 1: 1/1/2024 | Data 2: 2/1/2024
data1.anterior(data2): true
data1.posterior(data2): false
data1.igual(data2): false
Data 1 :2/1/2024| Data 2 2/1/2024
data1.anterior(data2): false
data1.posterior(data2): false
data1.igual(data2): true
Data 1 :3/1/2024| Data 2 2/1/2024
data1.anterior(data2): false
data1.posterior(data2): true
data1.igual(data2): false
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),p=[e];function c(i,l){return n(),s("div",null,p)}const d=a(o,[["render",c],["__file","04_exercicio_data_OO.html.vue"]]),k=JSON.parse('{"path":"/posts/exercicios/04_exercicio_data_OO.html","title":"Exercício: Data OO","lang":"pt-BR","frontmatter":{"icon":"study","date":"2024-07-09T21:30:00.000Z","tag":["java"],"category":["exercicio","entrega"],"prev":"03_exercicio_predio_OO","next":"04_exercicio_modelagem_carro","description":"Exercício: Data OO Utilizando os conhecimentos de O.O. construa um programa que represente uma Data utilizando as informações abaixo. Toda Data deve representar dia, mês e ano. ...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-poo.github.io/blog-material-aula/blog-material-aula/posts/exercicios/04_exercicio_data_OO.html"}],["meta",{"property":"og:site_name","content":"20241 POO Blog das Aulas"}],["meta",{"property":"og:title","content":"Exercício: Data OO"}],["meta",{"property":"og:description","content":"Exercício: Data OO Utilizando os conhecimentos de O.O. construa um programa que represente uma Data utilizando as informações abaixo. Toda Data deve representar dia, mês e ano. ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-07-09T22:25:06.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:published_time","content":"2024-07-09T21:30:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-09T22:25:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Exercício: Data OO\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-09T21:30:00.000Z\\",\\"dateModified\\":\\"2024-07-09T22:25:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[],"git":{"createdTime":1720560505000,"updatedTime":1720563906000,"contributors":[{"name":"leandro-costa","email":"leandro.costa@ifba.edu.br","commits":3}]},"readingTime":{"minutes":0.45,"words":135},"filePathRelative":"posts/exercicios/04_exercicio_data_OO.md","localizedDate":"9 de julho de 2024","excerpt":"\\n<ol>\\n<li>\\n<p>Utilizando os conhecimentos de O.O. construa um programa que represente uma <code>Data</code> utilizando as informações abaixo.</p>\\n<ul>\\n<li>Toda <code>Data</code> deve representar dia, mês e ano.</li>\\n<li>Toda <code>Data</code> deve poder saber se ela é anterior, posterior ou igual a outra <code>Data</code>.</li>\\n<li>Toda <code>Data</code> deve poder incrementar o dia depois de ser criada.</li>\\n<li>Toda <code>Data</code> deve poder exibir suas informações no formato Texto.</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{d as comp,k as data};
