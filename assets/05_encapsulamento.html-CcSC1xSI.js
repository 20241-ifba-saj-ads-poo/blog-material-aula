import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as n,e}from"./app-DPOTaq25.js";const t={},o=e(`<h1 id="encapsulamento" tabindex="-1"><a class="header-anchor" href="#encapsulamento"><span>Encapsulamento</span></a></h1><ul><li>Separar o programa em partes, tornando cada parte mais isolada possível uma da outra</li><li>A ideia é tornar o software mais flexível, fácil de modificar e de criar novas implementações</li><li>Permite utilizar o objeto de uma classe sem necessariamente conhecer sua implementação</li><li>Protege o acesso direto aos atributos de uma instância fora da classe onde estes foram criados</li><li>Uma grande vantagem do encapsulamento é que toda parte encapsulada pode ser modificada sem que os usuários da classe em questão sejam afetados</li></ul><h2 id="pacotes" tabindex="-1"><a class="header-anchor" href="#pacotes"><span>Pacotes</span></a></h2><ul><li>Forma de organizar classes dentro de uma estrutura de árvores.</li><li>Podemos entender a estrutura de árvores como os diretórios do sistema operacional.</li><li>O nome completo de uma classe é definido pelo seu pacote e o nome.</li><li>Organiza suas classes e bibliotecas <ul><li>Os diretórios estão diretamente relacionados aos chamados pacotes e costumam agrupar classes de funcionalidade parecida</li></ul></li><li>No pacote java.util por exemplo, temos as classes Date, SimpleDateFormat e GregorianCalendar; todas elas trabalham com datas de formas diferentes <ul><li>Significa que essas classes estão no diretório java/util/</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuN90OnKdvfHmLNCf045r29W20Ms5hCIoH0HNMw6q93C7YQ-ju99OaWeMgEMgvN98pKi1cmHYW0s7q000" alt="uml diagram" loading="lazy"><figcaption>Representação da estrutura de diretório.</figcaption></figure><ul><li>A palavra chave <em>package</em> indica qual pacote que contém a classe</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">java<span class="token punctuation">.</span>util</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Para usar uma classe ou um pacote você precisa usar a import palavra-chave:</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">pacote<span class="token punctuation">.</span></span><span class="token class-name">Class</span></span><span class="token punctuation">;</span>   <span class="token comment">// Importa uma única classe</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">pacotenovo<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>   <span class="token comment">// Importa todas as classes do pacote</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><div class="multicolumn"><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0imeIaxCJqrCLiXBB4XKKghaKW00cLbgIcGCK0mc1nMkvQhaSKlDIm2P0Q000" alt="uml diagram" loading="lazy"><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0imeIaxCJqrCLiXBB4lLAIp9p51Ig5Q20gvRB8JKl1Qm1GWC0" alt="uml diagram" loading="lazy"></div><figcaption>Visualizações diferentes de subpacotes</figcaption></figure><ul><li>O nome da classe na verdade para o compilador é <ul><li>java.util.Date</li><li>java.util.SimpleDateFormat</li><li>java.util.GregorianCalendar</li><li>java.io.File</li></ul></li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/PO_12SCm34Nlci8JU0P3Ipf09_Ya8gYLus0xlHJlNjib8IMwIBpt9P1B6J6lNidjquBnXOdD4syOyo5JQsDh5gsieSxBdvMmvGiL6XKfzIkshTahCf_WNVoYtDGGeaS-1MwHfn05ymNAymFnc91W1r4cLqr_ujU_" alt="uml diagram" loading="lazy"><figcaption>Representação de classes em seus pacotes.</figcaption></figure><h3 id="importar-uma-classe" tabindex="-1"><a class="header-anchor" href="#importar-uma-classe"><span>Importar uma classe</span></a></h3><p>Se você encontrar uma classe que deseja usar, por exemplo, a classe <em>Scanner</em>, que é usada para obter a entrada do usuário, escreva o seguinte código:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>No exemplo acima, <em>java.util</em> é um pacote, enquanto <em>Scanner</em> é uma classe do pacote <em>java.util</em>.</p><p>Para usar a classe <em>Scanner</em>, crie um objeto da classe e use qualquer um dos métodos disponíveis encontrados na documentação da classe <em>Scanner</em>. Em nosso exemplo, usaremos o método <em>nextLine()</em>, que é usado para ler uma linha completa:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o nome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> nome <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;nome é : &quot;</span> <span class="token operator">+</span> nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usar-uma-classe-sem-import" tabindex="-1"><a class="header-anchor" href="#usar-uma-classe-sem-import"><span>Usar uma classe sem import</span></a></h3><p>Para utilizar uma classe sem a palavra reservada <code>import</code> você pode referenciar a classe pelo nome completo (pacote.nomeClasse). Exemplo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Informe o nome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> nome <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;nome é : &quot;</span> <span class="token operator">+</span> nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modificadores-de-acesso" tabindex="-1"><a class="header-anchor" href="#modificadores-de-acesso"><span>Modificadores de acesso</span></a></h2><ul><li>private</li><li>protected</li><li>public</li><li>&lt;padrão&gt; (package, quando não é especificado nenhum dos 3 acima)</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/ZP713e8m38RlVOecNZJ45-34W1SPO-3YO6OKBaQUtKrG5X7rr7xPr-PlbdJ4BVMD1aXUhT2ywv3X5Owg9UHaLT6JOR0BCOKnn0oY4FDfjf5aIiFsXsbsmjJXk63cC5emTtW3Q0r9rB8YD1MoE5vI85wi6ZX9a6s9tjkKquVi7WN9yhUUUPsBCw__s9rxkI-q4c-kLVNfAS_tRsPUkzyYh-tjn6ltK-34TVxBvte7" alt="uml diagram" loading="lazy"><figcaption>Modificadores de acesso.</figcaption></figure><ul><li><p>São aplicados a atributos, métodos, construtores e classes</p></li><li><p>As classes só podem ser declaradas como public ou padrão</p><ul><li>Uma classe com acesso padrão só pode ser detectada por classes do mesmo pacote</li><li>Uma classe com acesso público pode ser detectada por classes de todos os pacotes</li></ul></li><li><p>Private</p><ul><li>Os membros privados só podem ser acessados por um código da mesma classe</li></ul></li><li><p>Protected</p><ul><li>Os membros protegidos podem ser acessados por outras classes do mesmo pacote, além de subclasses independente do pacote</li></ul></li><li><p>Public</p><ul><li>Os membros públicos podem ser acessados por todas as outras classes, mesmo de pacotes diferentes</li></ul></li><li><p>Padrão</p><ul><li>Os membros padrão só podem ser acessados por outras classes do mesmo pacote</li></ul></li></ul><h3 id="metodos-de-acesso-get-e-set" tabindex="-1"><a class="header-anchor" href="#metodos-de-acesso-get-e-set"><span>Métodos de acesso (get e set)</span></a></h3><p>Como os atributos/métodos privados ​​só podem ser acessadas dentro da mesma classe (uma classe externa não tem acesso a ela) é possível acessá-los se fornecermos métodos públicos <em>get</em> e <em>set</em>.</p><p>O <em>get</em> retorna o valor da variável e o <em>set</em> define o valor.</p><p>A sintaxe para ambos é que eles começam com <em>get</em> ou <em>set</em> seguido pelo nome do atributo com a primeira letra em maiúscula:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span> <span class="token comment">// private = acesso restrito</span>
  <span class="token comment">// Get</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nome<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// Set</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNome</span><span class="token punctuation">(</span><span class="token class-name">String</span> novoNome<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>novoNome<span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>novoNome<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>novoNome<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> novoNome<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>O método <em>get</em> retorna o valor da variável name.</p><p>O método <em>set</em> pega um parâmetro ( novoNome) e o atribui ao atributo <em>nome</em>.</p><p>A palavra-chave <code>this</code> é usada para se referir ao objeto atual.</p><p>No entanto, como o atributo <code>name</code> é declarada como <code>private</code>, não podemos acessá-la de fora desta classe:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pessoa</span> pessoa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pessoa<span class="token punctuation">.</span>nome <span class="token operator">=</span> <span class="token string">&quot;João&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// error</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">.</span>nome<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error </span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Se o atributo foi declarada como <em>public,</em> esperaríamos a seguinte saída:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    João
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>No entanto, ao tentar acessar um atributo <em>private,</em> obtemos um erro:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    Main.java:4: error: nome has private access <span class="token keyword">in</span> Pessoa
        pessoa.nome <span class="token operator">=</span> <span class="token string">&quot;João&quot;</span><span class="token punctuation">;</span>
              ^
    Main.java:5: error: nome has private access <span class="token keyword">in</span> Pessoa
        System.out.println<span class="token punctuation">(</span>pessoa.nome<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                 ^
    <span class="token number">2</span> errors
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Em vez disso, usamos os métodos getNome()e setNome()para acessar e atualizar a variável:</p><p>Exemplo</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Pessoa</span> pessoa <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pessoa<span class="token punctuation">.</span><span class="token function">setNome</span><span class="token punctuation">(</span><span class="token string">&quot;João&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Seta o valor do atributo nome para &quot;João&quot;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pessoa<span class="token punctuation">.</span><span class="token function">getNome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>saida</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>    <span class="token string">&quot;João&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="construtor" tabindex="-1"><a class="header-anchor" href="#construtor"><span>Construtor</span></a></h2><ul><li>Método especial definido na classe e executado no momento que o objeto é instanciado</li><li>Diferente de outro método pois não possui retorno</li><li>Deve ter o mesmo nome da classe.</li><li>Pode receber parâmetros <ul><li>Normalmente utilizados para inicializar os valores dos atributos do objeto</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>

  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">double</span> novoSaldo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-</span> quantidade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> novoSaldo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">deposita</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">+=</span> quantidade<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="o-que-o-new-faz" tabindex="-1"><a class="header-anchor" href="#o-que-o-new-faz"><span>O que o new faz?</span></a></h3><ul><li>A classe chamada é instanciada</li><li>Memória é alocada</li><li>Os passos definidos dentro do método construtor da classe são executados <ul><li>Construtor é um método especial para criar e inicializar novas instâncias da classe.</li><li>Construtores podem ser sobrecarregados</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>limite <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sobrecarga" tabindex="-1"><a class="header-anchor" href="#sobrecarga"><span>Sobrecarga</span></a></h3><ul><li><p>É a capacidade de definir métodos com o mesmo nome</p><ul><li>Assinatura seja diferente.</li><li>A mudança na assinatura ocorre alterando a quantidade e/ou tipo de parâmetros que um método recebe</li></ul></li><li><p>Sobrecarga é a capacidade de um objeto responder à mesma mensagem, com comportamentos (métodos) distintos, a depender dos tipos dos parâmetros recebidos</p><ul><li>aplicarInjecao()</li><li>aplicarInjecao(String nomeRemedio)</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">//...</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">somar</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">operar</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">return</span> <span class="token function">operar</span><span class="token punctuation">(</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span> 

<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">operar</span><span class="token punctuation">(</span><span class="token keyword">char</span> op<span class="token punctuation">,</span> <span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">switch</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token punctuation">{</span> 
    <span class="token keyword">case</span> <span class="token char">&#39;+&#39;</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token function">somar</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
      <span class="token keyword">break</span><span class="token punctuation">;</span> 
    <span class="token keyword">case</span> <span class="token char">&#39;-&#39;</span><span class="token operator">:</span> 
      <span class="token keyword">return</span> <span class="token function">subtrair</span><span class="token punctuation">(</span>v1<span class="token punctuation">,</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token keyword">int</span> numero<span class="token punctuation">,</span> <span class="token class-name">String</span> cliente<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>numero <span class="token operator">=</span> numero<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>cliente <span class="token operator">=</span> cliente<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>limite <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token keyword">int</span> numero<span class="token punctuation">,</span> <span class="token class-name">String</span> cliente<span class="token punctuation">,</span> <span class="token keyword">double</span> saldo<span class="token punctuation">,</span> <span class="token keyword">double</span> limite<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>numero<span class="token punctuation">,</span> cliente<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> saldo<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>limite <span class="token operator">=</span> limite<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta1<span class="token punctuation">;</span>
    minhaConta1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;Leandro1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    minhaConta1<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token class-name">Conta</span> minhaConta2<span class="token punctuation">;</span>
    minhaConta2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;Leandro2&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="por-que-encapsulamento" tabindex="-1"><a class="header-anchor" href="#por-que-encapsulamento"><span>Por que encapsulamento?</span></a></h2><ul><li>Melhor controle dos atributos e métodos da classe</li><li>Os atributos de classe podem ser somente leitura (se você usar apenas o método <em>get</em>) ou somente gravação (se você usar apenas o método <em>set</em>)</li><li>Flexível: o programador pode alterar uma parte do código sem afetar outras partes</li><li>Maior segurança de dados</li></ul>`,57),p=[o];function l(c,i){return s(),n("div",null,p)}const d=a(t,[["render",l],["__file","05_encapsulamento.html.vue"]]),m=JSON.parse('{"path":"/posts/05_encapsulamento.html","title":"Encapsulamento","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-07-10T20:40:00.000Z","tag":["pacote","encapsulamento","construtor"],"category":["aula"],"order":5,"description":"Encapsulamento Separar o programa em partes, tornando cada parte mais isolada possível uma da outra A ideia é tornar o software mais flexível, fácil de modificar e de criar nova...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-poo.github.io/blog-material-aula/blog-material-aula/posts/05_encapsulamento.html"}],["meta",{"property":"og:site_name","content":"20241 POO Blog das Aulas"}],["meta",{"property":"og:title","content":"Encapsulamento"}],["meta",{"property":"og:description","content":"Encapsulamento Separar o programa em partes, tornando cada parte mais isolada possível uma da outra A ideia é tornar o software mais flexível, fácil de modificar e de criar nova..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-07-17T22:55:27.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"pacote"}],["meta",{"property":"article:tag","content":"encapsulamento"}],["meta",{"property":"article:tag","content":"construtor"}],["meta",{"property":"article:published_time","content":"2024-07-10T20:40:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-17T22:55:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Encapsulamento\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-10T20:40:00.000Z\\",\\"dateModified\\":\\"2024-07-17T22:55:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Pacotes","slug":"pacotes","link":"#pacotes","children":[{"level":3,"title":"Importar uma classe","slug":"importar-uma-classe","link":"#importar-uma-classe","children":[]},{"level":3,"title":"Usar uma classe sem import","slug":"usar-uma-classe-sem-import","link":"#usar-uma-classe-sem-import","children":[]}]},{"level":2,"title":"Modificadores de acesso","slug":"modificadores-de-acesso","link":"#modificadores-de-acesso","children":[{"level":3,"title":"Métodos de acesso (get e set)","slug":"metodos-de-acesso-get-e-set","link":"#metodos-de-acesso-get-e-set","children":[]}]},{"level":2,"title":"Construtor","slug":"construtor","link":"#construtor","children":[{"level":3,"title":"O que o new faz?","slug":"o-que-o-new-faz","link":"#o-que-o-new-faz","children":[]},{"level":3,"title":"Sobrecarga","slug":"sobrecarga","link":"#sobrecarga","children":[]}]},{"level":2,"title":"Por que encapsulamento?","slug":"por-que-encapsulamento","link":"#por-que-encapsulamento","children":[]}],"git":{"createdTime":1720654632000,"updatedTime":1721256927000,"contributors":[{"name":"Leandro Costa","email":"leandro.costa@ifba.edu.br","commits":1},{"name":"leandro-costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":4.36,"words":1309},"filePathRelative":"posts/05_encapsulamento.md","localizedDate":"10 de julho de 2024","autoDesc":true}');export{d as comp,m as data};
