import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as l,c,a,d as s,w as e,e as t,b as o}from"./app-iS8cgy42.js";const u={},r=t(`<h1 id="programacao-orientada-a-objetos" tabindex="-1"><a class="header-anchor" href="#programacao-orientada-a-objetos"><span>Programação Orientada a Objetos</span></a></h1><h2 id="paradigmas" tabindex="-1"><a class="header-anchor" href="#paradigmas"><span>Paradigmas</span></a></h2><p>Paradigmas de Programação são abordagens ou estilos diferentes de escrever código para resolver problemas.</p><p>A programação estruturada divide o código em estruturas para armazenar dados e funções que executam tarefas específicas. Ela normalmente é indicacda para problemas menores e menos complexos.</p><p>Na POO, o código é organizado em objetos que representam entidades do mundo real, com atributos e métodos relacionados. Isso permite a modelagem de problemas complexos de forma mais intuitiva e promove a reutilização de código.</p><figure><img src="https://www.plantuml.com/plantuml/svg/PP113e8m44NtFSMahhc1CIJWceqN664aAhHaPheotDsM6X5PJUVzzkUbfIYoXd4mvVSqOVl4di2UHJbeOEoyXPS10ESxWZhk0WVFw7hQqWkZvhHd8fT2qNWnjjs2Qqq2-NbnoYI2DDE-QJ3pwj7mdLoYWD1S7wHUFZvChKQBWQ0QK8H-BErIPm45wfrivSV9i-8OUrVRnIwP_CMP7uiTdqr9hbj-Byyt" alt="uml diagram" loading="lazy"><figcaption> Comparativo entre programação estruturada e Orientada a Objetos.</figcaption></figure><h3 id="exemplo" tabindex="-1"><a class="header-anchor" href="#exemplo"><span>Exemplo</span></a></h3><p>Imagine um sistema de controle de contas correntes.</p><p>Como seria escrito a definição de uma conta corrente em programção estruturada?</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">float</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">int</span> numero_conta<span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span> correntista<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>como seria fazer um saque ou um depósito?</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token keyword">int</span> <span class="token function">sacar</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Conta</span> minha_conta<span class="token punctuation">,</span> <span class="token keyword">float</span> valor<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>minha_conta<span class="token punctuation">.</span>saldo<span class="token operator">&gt;=</span>valor<span class="token punctuation">)</span><span class="token punctuation">{</span>
    minha_conta<span class="token punctuation">.</span>saldo<span class="token operator">-=</span>valor<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">depositar</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Conta</span> minha_conta<span class="token punctuation">,</span> <span class="token keyword">float</span> valor<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  minha_conta<span class="token punctuation">.</span>saldo<span class="token operator">+=</span>valor<span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Como fazer um saque quando a conta for com limite (cheque especial)?</p><div class="language-c line-numbers-mode" data-ext="c" data-title="c"><pre class="language-c"><code>
<span class="token keyword">int</span> <span class="token function">sacarComLimite</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Conta</span> minha_conta<span class="token punctuation">,</span> <span class="token keyword">float</span> valor<span class="token punctuation">,</span> <span class="token keyword">float</span> limite<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>minha_conta<span class="token punctuation">.</span>saldo<span class="token operator">&gt;=</span>valor<span class="token operator">+</span>limite<span class="token punctuation">)</span><span class="token punctuation">{</span>
    minha_conta<span class="token punctuation">.</span>saldo<span class="token operator">-=</span>valor<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="objeto" tabindex="-1"><a class="header-anchor" href="#objeto"><span>Objeto</span></a></h2><p><sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><ul><li>Um objeto é cada uma das entidades identificáveis num dado domínio de aplicação</li><li>Em um sistema Bancário teríamos objetos do tipo: Cliente, Conta, Conta Corrente, Dependente, etc.</li><li>Um objeto também pode ser visto como um agregado de outros objetos (suas partes)</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/NOz12W8n34NtEKNetYj8rHE8It6HQOCjT5AdxMmKxsvmK4gp-Z-F5uYjZKfRvmJsdmgxHd9FZERmq1tDB2sR5w1E1o-Ko21Lh2CvhwhbBrj6TihFA64JtGYF985ZsTG9Akwk8NhFSjlhfQMl3bnV9tY3PV7w0E8lVG00" alt="uml diagram" loading="lazy"><figcaption> Um objeto como um conjuto de outros objetos.</figcaption></figure><ul><li>Um Objeto é uma entidade independente que armazena dados, encapsula serviços, troca mensagens com outros objetos e é modelado para executar as funções do sistema</li><li>Um Objeto pode ser descrito pela identificação de dois elementos básicos: estrutura e comportamento</li></ul><div class="hint-container tip"><p class="hint-container-title">Exemplo</p><p>Objeto do tipo <strong>Pessoa</strong></p><ul><li><strong>Estrutura</strong> : nome, cpf, idade</li><li><strong>Comportamento</strong> : trabalhar, descansar</li></ul></div><div class="hint-container tip"><p class="hint-container-title">Exemplo</p><p>Objeto do tipo <strong>Conta</strong></p><ul><li><strong>Estrutura:</strong> titular, código, saldo</li><li><strong>Comportamento:</strong> debitarValor, adicionarValor</li></ul></div><h2 id="mensagens" tabindex="-1"><a class="header-anchor" href="#mensagens"><span>Mensagens</span></a></h2><ul><li>São estímulos enviados aos objetos solicitando que alguma operação seja realizada por um dado objeto <ul><li>Nome da mensagem</li><li>Parâmetros</li></ul></li><li>Especifica O QUE deve ser feito</li><li>O comportamento de um objeto é dado pelo conjunto de mensagens que ele pode responder</li></ul><h2 id="caracteristicas-dos-objetos" tabindex="-1"><a class="header-anchor" href="#caracteristicas-dos-objetos"><span>Características dos Objetos</span></a></h2><ul><li>Único</li><li>Possui atributos que definem caraterísticas e/ou estado</li><li>Possuem capacidade de realizar ações que chamamos de métodos ou funções</li><li>Normalmente se diz que um objeto é uma instância de uma Classe.</li><li>O que é uma Classe ?</li></ul><h1 id="classe" tabindex="-1"><a class="header-anchor" href="#classe"><span>Classe</span></a></h1><p><sup class="footnote-ref"><a href="#footnote1">[1:1]</a><a class="footnote-anchor" id="footnote-ref1:1"></a></sup></p><h2 id="origem-do-termo" tabindex="-1"><a class="header-anchor" href="#origem-do-termo"><span>Origem do termo</span></a></h2><ul><li>A palavra classe vem da taxonomia da biologia. <ul><li>Todos os seres vivos de uma mesma classe biológica têm uma série de atributos e comportamentos em comum, mas não são iguais, podem variar nos valores desses atributos e como realizam esses comportamentos.</li></ul></li><li>Homo Sapiens define um grupo de seres que possuem características em comum <ul><li>Homo Sapiens é um ser humano?</li><li>Tudo está especificado na classe Homo Sapiens, mas se quisermos mandar alguém correr, comer, pular, precisaremos de uma instância de Homo Sapiens, ou então de um objeto do tipo Homo Sapiens.</li></ul></li></ul><h2 id="analogias" tabindex="-1"><a class="header-anchor" href="#analogias"><span>Analogias</span></a></h2><ul><li>Uma receita de bolo. <ul><li>Você come uma receita de bolo? <ul><li>Precisamos instaciá-la, criar um objeto bolo a partir dessa especificação (a classe) para utilizá-la.</li><li>Podemos criar centenas de bolos a partir dessa classe (a receita, no caso), eles podem ser bem semelhantes, alguns até idênticos, mas são objetos diferentes.</li></ul></li></ul></li><li>A planta de uma casa é uma casa?...</li></ul><h2 id="conceito" tabindex="-1"><a class="header-anchor" href="#conceito"><span>Conceito</span></a></h2><ul><li>Uma classe é uma descrição de um conjunto que compartilham os mesmos atributos(características), operações, relacionamentos e semântica</li><li>Todos os objetos são instâncias de classes, onde a classe descreve as propriedades e comportamentos daquele objeto</li><li><strong>Atributos</strong> são propriedades de uma classe, que descreve um intervalo de valores que as instâncias podem apresentar. Uma Classe pode ter qualquer número de atributos ou nenhum</li><li><strong>Operações</strong> correspondem aos processos que a classe pode realizar</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/RT1B2i8m40RWVKunT5_eOwLWAOgUmar8fpgGXwHJN1HFuyA3z6AMj8YnhfB_J_AHfEvOUkwD5lLdfh5bO0UUBbU6XZmg9cU5aJT8ZjqD5RMavFWQdmxEja7eZGJbBCi4P3VF1l481qB81m5WUuFUmQxAfw0qeMMS4fnwBQsRkaxg9gndsPGq6GeRic-fYAGYalQesSVK9fBoY2eZgeoe0wcLjBgK20oaQRMy4hPWyVvR5__hSgbhj4tu_tby0m00" alt="uml diagram" loading="lazy"><figcaption> Representação de vários objetos de uma mesma estrutura.</figcaption></figure><ul><li>Estrutura (molde) que define os atributos e/ou estados de um conjunto de objetos com características similares.</li><li>Define o comportamento de seus objetos (ações que o objeto pode fazer) através de métodos.</li><li>Descreve os serviços (ações) providos por seus objetos</li><li>Quais informações eles podem armazenar</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usando-a-classe" tabindex="-1"><a class="header-anchor" href="#usando-a-classe"><span>Usando a classe</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Objeto criado, mas como acessar?</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta<span class="token punctuation">;</span>
    minhaConta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Através da variável minhaConta, podemos acessar o objeto recém criado para alterar seu cliente, seu saldo, etc</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta<span class="token punctuation">;</span>
    minhaConta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    minhaConta<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>
    minhaConta<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">10.0</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Saldo atual: &quot;</span><span class="token operator">+</span>minhaConta<span class="token punctuation">.</span>saldo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="atributos-de-uma-classe" tabindex="-1"><a class="header-anchor" href="#atributos-de-uma-classe"><span>Atributos de uma Classe</span></a></h2><ul><li>Caraterísticas e/ou estado de uma classe</li><li>Após a classe ser instanciada em um objeto os atributos vão receber valores (caraterísticas e/ou estados) que definem o objeto</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span><span class="token comment">//atributo</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span><span class="token comment">//atributo</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span><span class="token comment">//atributo</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span><span class="token comment">//atributo</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="metodos-de-uma-classe" tabindex="-1"><a class="header-anchor" href="#metodos-de-uma-classe"><span>Métodos de uma Classe</span></a></h2><ul><li><p>Conjunto de ações que um determinado objeto pode executar</p></li><li><p>Definem o que um objeto pode fazer</p></li><li><p>São acionados por outros objetos</p><ul><li>Os objetos se comunicam através de métodos</li><li>Troca de mensagens</li></ul></li><li><p>Um método que saca uma determinada quantidade e não devolve nenhuma informação para quem acionar esse método</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//método</span>
    <span class="token keyword">double</span> novoSaldo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-</span> quantidade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> novoSaldo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Fazer um depósito</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
  <span class="token class-name">String</span> cliente<span class="token punctuation">;</span>
  <span class="token keyword">double</span> saldo<span class="token punctuation">;</span>
  <span class="token keyword">double</span> limite<span class="token punctuation">;</span>

  <span class="token keyword">void</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//método</span>
    <span class="token keyword">double</span> novoSaldo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-</span> quantidade<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">=</span> novoSaldo<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">void</span> <span class="token function">deposita</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//método</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">+=</span> quantidade<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> minhaConta<span class="token punctuation">;</span>
    minhaConta <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    minhaConta<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>
    minhaConta<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>

    <span class="token comment">//saca 20</span>
    minhaConta<span class="token punctuation">.</span><span class="token function">saca</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//deposita 50</span>
    minhaConta<span class="token punctuation">.</span><span class="token function">deposita</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Saldo atual: &quot;</span><span class="token operator">+</span>minhaConta<span class="token punctuation">.</span>saldo<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Método com retorno <ul><li>No caso do nosso método saca, podemos devolver um valor booleano indicando se a operação foi bem sucedida.</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span><span class="token punctuation">{</span>
  <span class="token comment">//...</span>

  <span class="token keyword">boolean</span> <span class="token function">saca</span><span class="token punctuation">(</span><span class="token keyword">double</span> valor<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>saldo<span class="token operator">&lt;</span>valor<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>saldo <span class="token operator">-=</span> valor<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//... </span>
    minhaConta<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> consegui<span class="token operator">=</span>minhaConta<span class="token punctuation">.</span><span class="token function">saca</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>consegui<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consegui sacar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Não consegui sacar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="referencia-ao-objeto" tabindex="-1"><a class="header-anchor" href="#referencia-ao-objeto"><span>Referência ao Objeto</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> c1<span class="token punctuation">;</span>
    c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Conta</span> c2<span class="token punctuation">;</span>
    c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>c1 uma variável que &quot;aponta&quot; para o objeto(referência).</li></ul><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iufIaqiIyz9pKXMKV5Dpyuio4vMgkHI004d2EJ-l95598R5O8Tae5u-a8OPaiX5K6uQ48LGBM09eh8skBbGLq1WGnv2hbiiXDIy5w4W51HWB0000" alt="uml diagram" loading="lazy"><figcaption> Representação da memória com duas instancias de Conta.</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Programa</span><span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">Conta</span> c1<span class="token punctuation">;</span>
    c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Conta</span> c2 <span class="token operator">=</span> c1<span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://www.plantuml.com/plantuml/svg/SoWkIImgAStDuNA0iufIaqiIyz9pKXMKV5Dpyuio4vMgkHI004d2EJ-l95598R5O8Tam5rqosH0gWo5X194m0ai0TThewa9LGJb6NBLS3gbvAM0NGMW0" alt="uml diagram" loading="lazy"><figcaption> Representação da memória com apenas uma instancia de Conta.</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">?</p><p>Como seria a transferência de valores entre duas contas?</p></div><figure><img src="https://www.plantuml.com/plantuml/svg/RP0z3i8m38NtdCBg1198D6C7L8aBS0KhDIYYJOhjWBWzeQKL51R_lE_v3Qv5aJLrhQddIIu-zCZOWUYZfLpPku5WqeXE_GsL80PZiaszypq6XIF7Spx2Bx5mPNM8GR40573b0jfFQ8rnJA_ex9lIOBlFArI1xZErtzIEzET46OESY3sldDtOtMvjilo687XDj1fK9aqSG98ZaJYPSYmqr4VnYdzzYxMcq0oF7FiJ" alt="uml diagram" loading="lazy"><figcaption>Diagram de sequencia para a transferência entre contas</figcaption></figure><details class="hint-container details"><summary>Detalhe</summary><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">transfere</span><span class="token punctuation">(</span><span class="token keyword">double</span> quantidade<span class="token punctuation">,</span> <span class="token class-name">Conta</span> destino<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">saca</span><span class="token punctuation">(</span>quantidade<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    destino<span class="token punctuation">.</span><span class="token function">deposita</span><span class="token punctuation">(</span>quantidade<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="comparando" tabindex="-1"><a class="header-anchor" href="#comparando"><span>Comparando</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Conta</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c1<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c1<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token class-name">Conta</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Contas iguais&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>O operador <code>==</code> compara o conteúdo das variáveis <ul><li>variáveis não guardam o objeto, e sim o endereço em que ele se encontra (referência)</li><li>As contas podem ser equivalentes no nosso critério de igualdade, porém elas não são o mesmo objeto.</li></ul></li></ul><h4 id="equals" tabindex="-1"><a class="header-anchor" href="#equals"><span>equals</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Conta</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  c1<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c1<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token class-name">Conta</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Conta</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>cliente <span class="token operator">=</span> <span class="token string">&quot;Leandro&quot;</span><span class="token punctuation">;</span>    
  c2<span class="token punctuation">.</span>saldo <span class="token operator">=</span> <span class="token number">100.0</span><span class="token punctuation">;</span>    
  <span class="token keyword">if</span> <span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Contas iguais&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Conta</span> <span class="token punctuation">{</span>
  <span class="token comment">//...</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Conta</span> outraConta<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cliente<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>outraConta<span class="token punctuation">.</span>cliente<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numero <span class="token operator">==</span> outraConta<span class="token punctuation">.</span>numero<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">//...</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transformando-o-objeto-em-string" tabindex="-1"><a class="header-anchor" href="#transformando-o-objeto-em-string"><span>Transformando o objeto em String</span></a></h2><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring"><span>toString</span></a></h3><p>O método <code>toString()</code> em Java é um método <s>da classe Object</s> que retorna uma representação em formato de string do objeto em questão.</p><p>Se uma classe em Java deseja ter sua própria representação em formato de string, ela pode sobrescrever esse método e fornecer uma implementação personalizada. A implementação sobrescrita deve retornar uma string que descreva o objeto de uma forma útil e significativa para o usuário.</p><p>Por exemplo, a seguinte classe <code>Pessoa</code> sobrescreve o método toString() para fornecer uma representação personalizada de uma pessoa:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pessoa</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> nome<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> idade<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token class-name">String</span> nome<span class="token punctuation">,</span> <span class="token keyword">int</span> idade<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>nome <span class="token operator">=</span> nome<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>idade <span class="token operator">=</span> idade<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Pessoa{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;nome=&#39;&quot;</span> <span class="token operator">+</span> nome <span class="token operator">+</span> <span class="token string">&quot;&#39;&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;, idade=&quot;</span> <span class="token operator">+</span> idade <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neste exemplo, o método <code>toString()</code> retorna uma string formatada que inclui o nome e a idade da pessoa em questão, com o seguinte formato: <code>Pessoa{nome=&#39;Alice&#39;, idade=30}</code>.</p><p>Para usar o método <code>toString()</code> em uma instância da classe <code>Pessoa</code>, basta chamá-lo em uma referência para um objeto <code>Pessoa</code>, como no exemplo abaixo:</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Pessoa</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pessoa</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> personString <span class="token operator">=</span> person<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// retorna &quot;Pessoa{nome=&#39;Alice&#39;, idade=30}&quot;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Escreve Pessoa{nome=&#39;Alice&#39;, idade=30} no console</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="exercicios" tabindex="-1"><a class="header-anchor" href="#exercicios"><span>Exercícios</span></a></h2>`,79),d=t('<h2 id="referencias" tabindex="-1"><a class="header-anchor" href="#referencias"><span>Referências</span></a></h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p>Caelum. Java e Orientação a Objetos - Curso fj-11. <a href="#footnote-ref1" class="footnote-backref">↩︎</a> <a href="#footnote-ref1:1" class="footnote-backref">↩︎</a></p></li></ol></section>',3);function m(k,v){const n=i("RouteLink");return l(),c("div",null,[r,a("ul",null,[a("li",null,[s(n,{to:"/posts/exercicios/02_exercicio_predio_estruturado.html"},{default:e(()=>[o("Exercício Prédio Estruturado")]),_:1})]),a("li",null,[s(n,{to:"/posts/exercicios/03_exercicio_modelagem_carro.html"},{default:e(()=>[o("Exercício Modelagem Carro")]),_:1})]),a("li",null,[s(n,{to:"/posts/exercicios/04_exercicio_predio_OO.html"},{default:e(()=>[o("Exercício Prédio OO")]),_:1})]),a("li",null,[s(n,{to:"/posts/exercicios/05_exercicio_modelagem_tv.html"},{default:e(()=>[o("Exercício Modelagem TV")]),_:1})]),a("li",null,[s(n,{to:"/posts/exercicios/06_exercicio_modelagem_dvd.html"},{default:e(()=>[o("Exercício Modelagem DVD")]),_:1})])]),d])}const h=p(u,[["render",m],["__file","04_objeto_classe.html.vue"]]),f=JSON.parse('{"path":"/posts/04_objeto_classe.html","title":"Programação Orientada a Objetos","lang":"pt-BR","frontmatter":{"icon":"edit","date":"2024-03-27T22:10:00.000Z","tag":["java","objeto","classe"],"category":["aula"],"order":4,"gitInclude":["../../src/bib/bib.md"],"description":"Programação Orientada a Objetos Paradigmas Paradigmas de Programação são abordagens ou estilos diferentes de escrever código para resolver problemas. A programação estruturada d...","head":[["meta",{"property":"og:url","content":"https://20241-ifba-saj-ads-poo.github.io/blog-material-aula/blog-material-aula/posts/04_objeto_classe.html"}],["meta",{"property":"og:site_name","content":"20241 POO Blog das Aulas"}],["meta",{"property":"og:title","content":"Programação Orientada a Objetos"}],["meta",{"property":"og:description","content":"Programação Orientada a Objetos Paradigmas Paradigmas de Programação são abordagens ou estilos diferentes de escrever código para resolver problemas. A programação estruturada d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"pt-BR"}],["meta",{"property":"og:updated_time","content":"2024-03-27T22:05:19.000Z"}],["meta",{"property":"article:author","content":"Leandro Souza"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"objeto"}],["meta",{"property":"article:tag","content":"classe"}],["meta",{"property":"article:published_time","content":"2024-03-27T22:10:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-03-27T22:05:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Programação Orientada a Objetos\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-27T22:10:00.000Z\\",\\"dateModified\\":\\"2024-03-27T22:05:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Leandro Souza\\",\\"url\\":\\"https://github.com/leandro-costa\\"}]}"]]},"headers":[{"level":2,"title":"Paradigmas","slug":"paradigmas","link":"#paradigmas","children":[{"level":3,"title":"Exemplo","slug":"exemplo","link":"#exemplo","children":[]}]},{"level":2,"title":"Objeto","slug":"objeto","link":"#objeto","children":[]},{"level":2,"title":"Mensagens","slug":"mensagens","link":"#mensagens","children":[]},{"level":2,"title":"Características dos Objetos","slug":"caracteristicas-dos-objetos","link":"#caracteristicas-dos-objetos","children":[]},{"level":2,"title":"Origem do termo","slug":"origem-do-termo","link":"#origem-do-termo","children":[]},{"level":2,"title":"Analogias","slug":"analogias","link":"#analogias","children":[]},{"level":2,"title":"Conceito","slug":"conceito","link":"#conceito","children":[{"level":3,"title":"Usando a classe","slug":"usando-a-classe","link":"#usando-a-classe","children":[]}]},{"level":2,"title":"Atributos de uma Classe","slug":"atributos-de-uma-classe","link":"#atributos-de-uma-classe","children":[]},{"level":2,"title":"Métodos de uma Classe","slug":"metodos-de-uma-classe","link":"#metodos-de-uma-classe","children":[]},{"level":2,"title":"Referência ao Objeto","slug":"referencia-ao-objeto","link":"#referencia-ao-objeto","children":[{"level":3,"title":"Comparando","slug":"comparando","link":"#comparando","children":[]}]},{"level":2,"title":"Transformando o objeto em String","slug":"transformando-o-objeto-em-string","link":"#transformando-o-objeto-em-string","children":[{"level":3,"title":"toString","slug":"tostring","link":"#tostring","children":[]}]},{"level":2,"title":"Exercícios","slug":"exercicios","link":"#exercicios","children":[]},{"level":2,"title":"Referências","slug":"referencias","link":"#referencias","children":[]}],"git":{"createdTime":1710890167000,"updatedTime":1711577119000,"contributors":[{"name":"Leandro Souza","email":"leandro.costa@ifba.edu.br","commits":1},{"name":"leandro-costa","email":"leandro.costa@ifba.edu.br","commits":1}]},"readingTime":{"minutes":5.65,"words":1695},"filePathRelative":"posts/04_objeto_classe.md","localizedDate":"27 de março de 2024","excerpt":"\\n<h2>Paradigmas</h2>\\n<p>Paradigmas de Programação são abordagens ou estilos diferentes de escrever código para resolver problemas.</p>\\n<p>A programação estruturada divide o código em estruturas para armazenar dados e funções que executam tarefas específicas. Ela normalmente é indicacda para problemas menores e menos complexos.</p>","autoDesc":true}');export{h as comp,f as data};
